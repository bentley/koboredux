-------------------------------------------------------------------------------
TODO:
-------------------------------------------------------------------------------

* Rock explosion looks bland. There should also be pieces of rock flying!

* Not sure about this whole idea of balancing the skill levels through shields
  and damage... It just makes the harder skill levels slow and boring, as you
  have to play defensive and attack over and over!

* Visual shock wave effect for splash damage?

* Push/shockwaves to go with splash damage?

* Higher firing rate? Only for higher skill levels...?

* Do we have enough "bolts"!?

* Rocks are too small and/or too hard to distinguish!

* Specifying -width or -height via the command line should automatically set
  videomode to -1 (custom)!

* Don't lock the entire spinplanet buffer unless we need to!
	* Resize the window? Calls for clearing the border around it.

* Audiality 2 is using SDL 1.2...!?

* Make some less annoying GUI sound effects..
	* "Small radio style" group! (See the a2jingle demo.)

* Bosses with complex collision zones, so they need to be shot from particular
  directions to take damage - a bit like mobile bases.

* 90/180/270Â° sprite rotation!

* Double buffered stream window! (For reduced spinplanet frame rate on very
  low end hardware.)

* Do we really need z coordinates for the rotating starfield? They're all
  fixed anyway.

* Implement a wrapping scroll offset in stream_window_t, so we can use it for
  the radar! Or maybe we can just use the current offscreen window like that?

* Implement offscreen windows as a subclass? Cleaner and faster, probably.

* Implement color and alpha modulation for all window draw calls!

* Enemy/core/... indicator subsystem:
	* Since all objects are updated every game logic frame, it's probably
	  most efficient if the relevant ones report to the indicators
	  themselves.
	* We need something to report to. Shouldn't mess directly with the LED
	  bars from game logic code.

* Should window_t manage SDL renderer state? Probably, because the window_t
  rendering API gives the impression of keeping state per window.
	* Well, it pretty much does already - and there isn't much state in an
	  SDL renderer anyway.

* Problem with offscreen windows: They can only share textures with the screen
  when using render targets! The software fallback renderers need their own
  textures.

* window_t::colorkey() and window_t::alpha() need to be ported to the rendering
  API.

* Remove all load time image filters?

Kobo DL install on Ubuntu:
	/usr/share/kobo-deluxe/
		gfx/
		sfx/
	/var/games/kobo-deluxe/scores/

	* How do we create the scores dir with correct permissions with CMake?
		* Are we even supposed to bother with this? Non-portable...

-------------------------------------------------------------------------------

MetaRetroScreenFX:
	"Retro display effects implemented on virtual retro hardware."
	* Opaque 8 bpp monochrome "surface" object
		* Size determined on creation
	* Border value or "wrapped" flag.
	* FX modes:
		* 3x3 blur
		* 3x3 glow (like blur, but non-linear?)
		* 3x3 raster horizontal
		* 3x3 raster horizontal
		* IIR left raster
		* IIR down raster
		* IIR left raster + 3x3 blur
		* IIR down raster + 3x3 blur
	* Output translation:
		* Palette with 32 bpp entries
			* 2..256 entries, assumed to map index to intensity.
		* Byte index of target channel. (32, 24 and 8 bpp only.)
	* Methods for rendering all or part of the surface into memory
		* Target pixel formats:
			* 32, 24(?), 16 and 8 bpp
			* Bit level pixel format irrelevant; we just grab
			  values from the palette!
			* If no palette is specified, directly output raw bytes
			  into the specified index of output pixels.
		* Parameters:
			* Bytes per pixel
			* Source position (x, y)
			* Destination (pointer to top-left pixel)
			* Destination pitch (bytes per row)

-------------------------------------------------------------------------------
