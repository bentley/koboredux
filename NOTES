
-------------------------------------------------------------------------------
BUGS:
-------------------------------------------------------------------------------

* Scrap pipe cleanup still fails in some rare cases! Conflict between colliding
  pipein and/or pipeout enemies...?

* Input should consider events - not just state!

* Bullet impact animations should stick to the objects they hit! As it is, they
  are just spawned with velocity 0.


-------------------------------------------------------------------------------
TODO:
-------------------------------------------------------------------------------

* Animated scrap pipe tiles! Flames and sparks!

* Flying, bouncing debris!

* How about handling music by sending messages to a "director" A2S script, that
  handles tracks, transitions etc?

* Maybe we should change the game logic units to 1.0/tile, after all? These
  "physics pixels" that no longer relate to screen pixels at all is getting
  ugly...

* Should window_t manage SDL renderer state? Probably, because the window_t
  rendering API gives the impression of keeping state per window.
	* Well, it pretty much does already - and there isn't much state in an
	  SDL renderer anyway.

* Problem with offscreen windows: They can only share textures with the screen
  when using render targets! The software fallback renderers need their own
  textures.

* window_t::colorkey() and window_t::alpha() need to be ported to the rendering
  API.

* Screenshots: SDL_RenderReadPixels().

* Remove all load time image filters?

Kobo DL install on Ubuntu:
	/usr/share/kobo-deluxe/
		gfx/
		sfx/
	/var/games/kobo-deluxe/scores/

	* How do we create the scores dir with correct permissions with CMake?


-------------------------------------------------------------------------------
Design:
-------------------------------------------------------------------------------

	* Temporary invulnerability instead of countdown + position restart?
	  It's quite annoying to find your way back to where you were, and that
	  might become more of a problem if we add other types of maps...

	* "Loader" pictures for each area?

	* Turn the assassin into a portal through which various nasty stuff
	  gets teleported in? (Graphics change only.)

	* Show one or two levels ahead as parallax layers!

	* Final (10th) level in each area is near or at ground level over a
	  planet.
		* Maybe the last battle is over a gigantic space station?

	* Add bosses after each 10 map area?
		* Smaller maps?
		* Barriers instead of wrapping?
			* The bosses could trap you inside a force field that
			  you can't leave until the bosses have been destroyed.
		* Indestructible obstacles?
		* How about fighting one or more massive enemies inside huge
		  labyrinths?
		* If we have obstacles, bosses should probably move on
		  predefined paths between waypoints, to keep things simple
		  and predictable. The use of waypoints means the bosses can
		  still make decisions, but they don't have to do actual live
		  pathfinding.

	* The occasional creepy cut scene where a video of some alien monster
	  face is resynthesized using explosion sprites?

	* An ancient TODO in there says "Short demo of how to destroy a base."


-------------------------------------------------------------------------------

MetaRetroScreenFX:
	"Retro display effects implemented on virtual retro hardware."
	* Opaque 8 bpp monochrome "surface" object
		* Size determined on creation
	* Border value or "wrapped" flag.
	* FX modes:
		* 3x3 blur
		* 3x3 glow (like blur, but non-linear?)
		* 3x3 raster horizontal
		* 3x3 raster horizontal
		* IIR left raster
		* IIR down raster
		* IIR left raster + 3x3 blur
		* IIR down raster + 3x3 blur
	* Output translation:
		* Palette with 32 bpp entries
			* 2..256 entries, assumed to map index to intensity.
		* Byte index of target channel. (32, 24 and 8 bpp only.)
	* Methods for rendering all or part of the surface into memory
		* Target pixel formats:
			* 32, 24(?), 16 and 8 bpp
			* Bit level pixel format irrelevant; we just grab
			  values from the palette!
			* If no palette is specified, directly output raw bytes
			  into the specified index of output pixels.
		* Parameters:
			* Bytes per pixel
			* Source position (x, y)
			* Destination (pointer to top-left pixel)
			* Destination pitch (bytes per row)
