-------------------------------------------------------------------------------
TODO:
-------------------------------------------------------------------------------

* Implement offscreen windows as a subclass? Cleaner and faster, probably.

* Implement color and alpha modulation for all window draw calls!

* Enemy/core/... indicator subsystem:
	* Since all objects are updated every game logic frame, it's probably
	  most efficient if the relevant ones report to the indicators
	  themselves.
	* We need something to report to. Shouldn't mess directly with the LED
	  bars from game logic code.

* There are issues with deleted SDL textures being accessed after hide()!

* Specifying -width or -height via the command line should automatically set
  videomode to -1 (custom)!

* Should window_t manage SDL renderer state? Probably, because the window_t
  rendering API gives the impression of keeping state per window.
	* Well, it pretty much does already - and there isn't much state in an
	  SDL renderer anyway.

* Problem with offscreen windows: They can only share textures with the screen
  when using render targets! The software fallback renderers need their own
  textures.

* window_t::colorkey() and window_t::alpha() need to be ported to the rendering
  API.

* Remove all load time image filters?

Kobo DL install on Ubuntu:
	/usr/share/kobo-deluxe/
		gfx/
		sfx/
	/var/games/kobo-deluxe/scores/

	* How do we create the scores dir with correct permissions with CMake?

-------------------------------------------------------------------------------

MetaRetroScreenFX:
	"Retro display effects implemented on virtual retro hardware."
	* Opaque 8 bpp monochrome "surface" object
		* Size determined on creation
	* Border value or "wrapped" flag.
	* FX modes:
		* 3x3 blur
		* 3x3 glow (like blur, but non-linear?)
		* 3x3 raster horizontal
		* 3x3 raster horizontal
		* IIR left raster
		* IIR down raster
		* IIR left raster + 3x3 blur
		* IIR down raster + 3x3 blur
	* Output translation:
		* Palette with 32 bpp entries
			* 2..256 entries, assumed to map index to intensity.
		* Byte index of target channel. (32, 24 and 8 bpp only.)
	* Methods for rendering all or part of the surface into memory
		* Target pixel formats:
			* 32, 24(?), 16 and 8 bpp
			* Bit level pixel format irrelevant; we just grab
			  values from the palette!
			* If no palette is specified, directly output raw bytes
			  into the specified index of output pixels.
		* Parameters:
			* Bytes per pixel
			* Source position (x, y)
			* Destination (pointer to top-left pixel)
			* Destination pitch (bytes per row)
