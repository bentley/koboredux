def title	"KRSFX"
def version	"0.7.0"
def description	"Kobo Redux sound effects"
def author	"David Olofson"
def copyright	"Copyright 2016 David Olofson"
def license	"CC BY-NC-ND 3.0"
def a2sversion	"1.9.1"

/*----------------------------------------------
 Based on the Kobo II Sound Effects
 Copyright 2011-2013 David Olofson
 Copyright 2015-2016 David Olofson (Kobo Redux)
----------------------------------------------*/

def FADETIME	100

fump(P V)
{
	struct { wtosc }
	w sine; p -2; a V
	10 {
		+p .2; d 2
	}
	12 {
		-p .2; d 3
	}
	10 {
		-p .02; *a .95; d 20
	}
	a 0; d 200
}

Launch(P V=1 PanX)
{
	struct { wtosc; inline; panmix }
	pan PanX; vol V; set
	a .5
	w noise; p -2
	15 {
		+p .4; d 3
	}
	fump P 2
	a .1; d 50
	-p 2
	a 0; d 200
}


Electro1(V)
{
	struct { wtosc }
	w noise; a V; set a; p 6
	a 0; d 50
	p 5; a (V * .1); d 150
	a 0; d 10
}

FireElectro(P V=1 PanX)
{
	struct { wtosc; inline; panmix }
	pan PanX; vol V; set
	+tr P
	w saw; a 0
	5 {
		p 5; +a .04
		15 {	d 1; -p .2 }
	}
	*a .5
	Electro1 .3
	20 {
		p 3.7; *a .85
		14 {	d 1; -p .2 }
	}
}


blopp(pitch V decay rp=1)
{
	struct { wtosc }
	w triangle; a (V * .5); !p1 (pitch + rand rp); !p2 (p1 + .3 + rand .5)
	!per (rand 2 + 2)
	wg (a - .001) {
		p p1; d per
		p p2; d per
		+p2 (p1 - p2 * .01)
		*a decay
	}
}

Impact(P V=1 PanX)
{
	struct { wtosc; inline; panmix }
	pan PanX; vol V; set
	+tr P
	w square; p (rand .5 + 1.5); a .3; set a
	5 { -p .2; d 1 }
	w triangle; a .5
	15 { -p .1; d 2 }
	a 0; d 10
	w noise; p (rand .5 + 4); a .1; set a; a 0; d 100
}


PlayerDamage(P V=1 PanX)
{
	struct { wtosc; inline; panmix }
	pan PanX; vol V; set
	+tr P
	blopp 0 1 .7
	w square; p (rand .3 + 1.5); a .5; set a
	5 { -p .4; d 5 }
	w triangle; a 1
	12 { -p .1; d 2 }
	a 0; d 1
	w noise
	p (rand .5 + 3)
	@a .3;	d 10
	a .05;	d 50
	a 0;	d 200
}


ImpactGround(P V=1 PanX)
{
	struct { wtosc; panmix }
	pan PanX; vol V; set
	+tr P
	w triangle; p (rand 1 + .5); a .3; set a
	10 { -p .2; d 2 }
	10 { -p .1; d 5 }
	p (rand .5 - 3); a 0; d 100
}


LavaImpact(P V=1 PanX)
{
	struct { wtosc; panmix }
	pan PanX; vol V; set
	+tr P
	w triangle; p (rand 1 + 1); a .3
	5 {	-p .2; d .5 }
	20 {	-p .1; d 1 }
	a 0; d 10
	w sine
	10 {
		p (rand 1 - 1); +a .05; d 2
	}
	wg (a - .01) {
		p (rand 1 - 2); *a .8; d 2
	}
	w noise; p 6
	50 {
		a (rand .1); set a; d (1 + rand 15)
	}
	!A 1
	wg (A - .01) {
		@a (A * rand .1); d (1 + rand 15); *A .93
	}
}


Explo0(P V=1 Wave Attack Period=.5)
{
	struct { wtosc }
	+P tr; w Wave; !x 1; a V; -P 3; tr Attack; !DP (Period * .01)
	200 {
		*tr .98; p (P + rand x); +x .01; d Period; +Period DP
	}
	400 {
		*tr .98; p (P + rand x); -x .0025; *a .995; d Period; +Period DP
	}
	tr P
	600 {
		rand p x; *a .993; d 2.5
	}
}

Explosion(P V=1 Period=.5)
{
	struct { wtosc }
	+tr P
	Explo0 0 V sine 3 Period
	Explo0 -1 V triangle 4 Period
	Explo0 .5 (V * .5) triangle 5 Period
	Explo0 1.5 (V * .25) triangle 3 Period
	Explo0 3 (V * .2) triangle 3 (Period * .5)
	w noise; a (V * .5); set a
	100 { *a .9; d (30 * Period) }
}

Rattle(P V=1 Count=20 Decay=.8 Spacing=100)
{
	struct { wtosc }
	w noise; tr P
	!a0 V
	20 {
		a a0; set a; a 0; p (rand 3); d (2 + rand 20)
		d (rand Spacing)
		*a0 Decay
	}
}

SegmentDeath(P V=1 PanX)
{
	struct { inline; panmix }
	pan PanX; vol V; set
	+tr P
	Explosion (rand 1) 2 .1
	Explosion (rand 1 - 1) 2 .2
	Rattle (rand 1 - .5) 1.5 20 .85 10
}


Sweep(Vel Pitch Wave Start Dur Decay)
{
	struct { wtosc }
	w Wave; tr Pitch; p Start; a Vel; set a
	!reps (Dur / 2); !da (a / reps)
	reps {
		*p Decay; -p .005; d 10
	}
	reps {
		*p Decay; -p .005; -a da; d 10
	}
.stop	a 0; d 10
	1() { force stop }
}

MegaDeath(P V=1 PanX)
{
	struct { inline; panmix }
	pan PanX; vol V; set
	tr P
	Explosion (1.5 + rand .5) 1 .2
	d (50 + rand 100)
	Sweep .4 (rand .1 - .7) triangle 2 250 .99
	Sweep .4 (rand .1 - 1) triangle 2 250 .99
	Sweep .15 -1 saw 2 250 .99
	Sweep .15 -1.2 saw 2 250 .99
	Sweep 1 -2 triangle 1 250 .99
	Sweep 2 -3 triangle 1 250 .99
	d (50 + rand 300)
	Explosion 0 1 1
	d (200 + rand 500)
	Explosion -.5 1 1
}


Rumble(pitch amp decay)
{
	struct { wtosc }
	-pitch 2
	w triangle; a amp
	wg (a - .001) {
		p (pitch + rand 1); *a decay; d 10
	}
}

Debris(P V=1 Count=20 Decay=.8 Spacing=50)
{
	struct { wtosc }
	w triangle
	!a0 V
	20 {
		p (P - 1 + rand 2); a a0; set a; phase 0
		15 {
			-p .2; *a .9
			d (1 + rand 1)
		}
		a 0; d 2
		d (rand Spacing)
		*Spacing 1.1
		*a0 Decay
	}
}

BoomerangDeath(P V=1 PanX)
{
	struct { inline; panmix }
	pan PanX; vol V; set
	Explosion (P + 1.5 + rand .5) 1 .2
	Rumble P 2 .9
	Rattle P 2 30 .7 20
	d (100 + rand 100)
	Debris P 4 20 .7 30
	Rumble (P - .9) 2 .97
}


KoboDeath(P V=1 PanX)
{
	struct { inline; panmix }
	pan PanX; vol V; set
	+tr P
	Explosion (2 + rand .5) 1 .3
	Explosion (rand .5 - 1) 1 1
	Rumble -1 4 .98
	Rattle 0 1.5 50 .85 50
	Debris 0 3 40 .9 50
	Sweep .04 (rand .2 + 2.7) saw 2 150 .95
	Sweep .04 (rand .2 + 3) saw 2 150 .95
	Sweep .2 (rand .2 + 1.2) triangle 2 150 .95
	Sweep .2 (rand .2) triangle 2 150 .95
	Sweep 1 -2 triangle 1 250 .99
	Sweep 1 -2.5 triangle 1 250 .99
}


BaseRumble(P V=1 PanX)
{
	struct { wtosc; panmix }
	pan PanX; vol V; set
	w triangle; a 2
	-P (4 + rand .5)
	!po (3 + rand 1)
	50 {
		p (P + po + rand 2)
		*po .93
		d 1
	}
	wg (a - .001) {
		p (P + po + rand 2)
		*a .99
		*po .95
		d 1
	}
	a 0; d 1
}


ChargeBlipp(P V=1 PanX Charge=1)
{
	struct { wtosc; panmix }
	pan PanX; vol V; set
	a .3; w triangle; p (Charge * 2 + 1); d 2
	5 {
		*a .9; -p .1; d 1
	}
	a 0; d 15
}

FireCharged(P V=1 PanX Charge=1)
{
	struct { wtosc; panmix }
	pan PanX; vol V; set
	+tr (P - 4)
	a (Charge + 1); set a; w triangle; p (4 + Charge)
	20 {
		d 5; *p .96; +p (rand .1)
	}
	while (a > .05) {
		d 5; *p .98; +p (rand .01); -a .01
	}
	a 0; d 100
}

FirePlasma(P V=1 PanX)
{
	struct { wtosc; panmix }
	pan PanX; vol V; set
	+tr P
	sleep
.retrig
	// Fire!
	a .1; set a; w noise; p 5; d 10
	a .5; set a; w triangle; p 1.5
	6 {	d 5; -p .5; +p (rand .1); -a .025 }
	w saw; p (2 + rand .2); a .005; set a
	+a .005
	+p .9; d 10
	-p .85; d 10

	// Recharge (aborted if retrigged)
	9 {
		+a .005
		+p .9; d 10
		-p .85; d 10
	}
	20 {
		-a .003
		+p .7; d 10
		-p .65; d 10
	}
	a 0; d 10

	2() {
		force retrig
	}

	3(Ch) {
		ChargeBlipp P V PanX Ch
	}

	4(Ch) {
		FireCharged P V PanX Ch
	}
}


Klank(P V=1 PanX)
{
	struct { wtosc; panmix }
	pan PanX; vol V; set
	+tr P
	w noise;	p 5;	@a .15;		d 5
	w square
	p (rand .1 );		@a .125;	d 5
	p (rand .3 + 1);	@a .1;		d 5
	p (rand .2 + 2.5);	@a .075;	d 5
	p (rand .1 + 4);	@a .05
	a 0; d 20
}


BombTrig(P V=1 PanX)
{
	struct { wtosc; panmix }
	pan PanX; vol V; set
	w triangle
	a .1
	!playing 1
	while (playing) {
		3 {
			p 40n;	d 10
			p 45n;	d 10
		}
	}
	1() {
		playing 0
	}
	2(Dmg) { }
	3(pV pX) {
		vol pV
		pan pX
		ramp FADETIME
	}
}


BombDetonation(P V=1 PanX)
{
	struct { inline; panmix }
	pan PanX; vol V; set
	+tr P
	Explosion (.3 + rand .3) 1.5 .2
	Rumble -.9 3 .96
	Rattle -.5 1 10 .8 10
	Debris -.5 4 10 .85 20
}


Tele(wv pitch spread vel attack decay)
{
	struct { wtosc }
	!env 0
	w wv; p pitch; a env
	!da (vel / attack)
	attack {
		p (rand spread + pitch); a env; +env da; d 5
	}
	da (vel / decay)
	decay {
		p (rand spread + pitch); a env; -env da; d 2
	}
}

Teleport(P V=1 PanX)
{
	struct { inline; panmix }
	pan PanX; vol V; set
	+tr P
	Tele square 200f 2 .1 10 50
	d 100
	Tele triangle 2000f 1 .4 40 150
	Tele triangle 1500f .6 .1 100 150
	Tele square 250f 3 .1 150 200
	Tele triangle 150f 3 .04 200 250
	Tele sine 30f 1 2 50 500
	Tele sine 50f 2 1 15 300
	d 300
	Tele triangle 800f 1 .05 100 200
}


r1(P V=1)
{
	struct { wtosc }
	w triangle
	!per (p2d (P + tr) / 2)
	!amp V
.restart
	while amp > .002 {
		p (P + 1.5 + rand .05)
		a amp; d per
		a 0; d per
		+amp (V - amp * .1)
	}
	a 0; d 10
	1(NV) {
		V NV
		if V {
			if (amp <= .003) {
				amp .003
			}
			wake restart
		}
	}
}

RenderReactorTurbine()
{
	def Chorus 50
	def Spread .03
	!detune (4 - (Spread / 2))
	Chorus {
		0:r1 detune
		+detune (Spread / Chorus)
	}
}

wave ReactorTurbineWave
{
	wavetype MIPWAVE; samplerate 96000
	duration .5; looped; normalize; xfade
	RenderReactorTurbine
}

h1(P V=1)
{
	struct { wtosc }
	w square; p P; a V; set
	sleep
}

RenderReactorHum()
{
	def Chorus 10
	def Spread .7
	!detune (0 - (Spread / 2))
	Chorus {
		0:h1 detune
		+detune (Spread / Chorus)
	}
}

wave ReactorHumWave
{
	wavetype MIPWAVE; samplerate 48000
	duration .5; looped; normalize; xfade
	RenderReactorHum
}

Grenade(P V=1 PanX)
{
	struct { inline; panmix }
	pan PanX; vol V; set
	+tr P
	Explosion (1.5 + rand .5) .5 .5
	Explosion (rand .5 - 1) 1 1
	Rattle 0 1.5 50 .85 50
	Debris 0 4 40 .9 50
}

Reactor(P V=1 PanX)
{
	struct {
		wtosc	o1
		wtosc	o2
		wtosc	o3
		panmix	pm
	}
	pm.pan PanX; pm.vol V; set
	+P 40f
	!p1 (P + rand .5)
	!p2 (P - .7 + rand .5)
	!p3 (P + .5 + rand .5)
	o1.p p1; o1.a .5; o1.w ReactorHumWave
	o2.p p2; o2.a .3; o2.w ReactorTurbineWave
	o3.p p3; o3.a .2; o3.w ReactorTurbineWave
	!pp2 p2
	!pp3 p3
	!damage 0
	!fp1 p1
	!fp2 pp2
	!fp3 pp3
	for {
		fp1 (p1 + .05)
		if (rand 1 > .95) {
			pp2 (p2 + rand .3)
		}
		if (rand 1 > .95) {
			pp3 (p3 + rand .3)
		}
		20 {
			-fp1 .01
			+fp2 (pp2 - fp2 * .002)
			+fp3 (pp3 - fp3 * .002)
			o1.p (fp1 + (damage * 2))
			o2.p (fp2 - (damage / 2))
			o3.p (fp3 - (damage / 2))
			!d22 (damage * damage * 2)
			o1.a (.5 + d22)
			o2.a (.3 + d22)
			o3.a (.2 + d22)
			*damage .97
			d 10
		}
	}

.stop	Grenade 0 pm.vol pm.pan
	o1.p (fp1 + 2)
	o1.a (.5 + 1)
	o2.a (.3 + 1)
	o3.a (.2 + 1)
	200 {
		-o1.p .02
		-o2.p .007
		-o3.p .005
		-o1.a ((.5 + 1) / 300)
		-o2.a ((.3 + 1) / 300)
		-o3.a ((.2 + 1) / 300)
		d 10
	}
	100 {
		-o1.p .02
		-o2.p .007
		-o3.p .005
		*pm.vol .95
		d 10
	}
	pm.vol 0; d 10

	// Stop
	1() {
		force stop
	}

	// Damage
	2(Dmg) {
		+damage Dmg
		if (damage > 1) {
			damage 1
		}
	}

	// Positional update
	3(pV pX) {
		pm.vol pV
		pm.pan pX
		ramp FADETIME
	}
}


export def S_LAUNCH		Launch
export def S_LAUNCH_BULLET1	FireElectro
export def S_LAUNCH_BULLET2	FireElectro
export def S_LAUNCH_BULLET3	FireElectro
export def S_LAUNCH_RING	Launch
export def S_LAUNCH_BOMB	Launch
export def S_DAMAGE		Impact
export def S_NO_DAMAGE		Klank
export def S_PLAYER_DAMAGE	PlayerDamage
export def S_HIT_ROCK		ImpactGround
export def S_EXPLO_NODE		SegmentDeath
export def S_EXPLO_ENEMY	BoomerangDeath
export def S_EXPLO_PLAYER	KoboDeath
export def S_EXPLO_RING		LavaImpact
export def S_EXPLO_ROCK		BoomerangDeath
export def S_RUMBLE		BaseRumble
export def S_SHOT		FirePlasma
export def S_BOMB_TRIG		BombTrig
export def S_BOMB_DETO		BombDetonation
export def S_BOMB2_TRIG		BombTrig
export def S_BOMB2_DETO		BombDetonation
export def S_CORE		Reactor
export def S_BIGSPAWN		Teleport
export def S_ENEMY_M1		Reactor
export def S_ENEMY_M2		Reactor
export def S_ENEMY_M3		Reactor
export def S_ENEMY_M4		Reactor
