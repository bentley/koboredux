def title	"KRUISFX"
def version	"0.7.0"
def description	"Kobo Redux UI sound effects"
def author	"David Olofson"
def copyright	"Copyright 2015 David Olofson"
def license	"CC BY-NC-ND 3.0"
def a2sversion	"1.9.1"

Rumble(pitch amp decay)
{
	struct { wtosc }
	-pitch 2
	w triangle; a amp
	wg (a - .001) {
		p (pitch + rand 1); *a decay; d 10
	}
}

Tele(wv pitch spread vel attack decay)
{
	struct { wtosc }
	!env 0
	w wv; p pitch; a env
	!da (vel / attack)
	attack {
		p (rand spread + pitch); a env; +env da; d 5
	}
	da (vel / decay)
	decay {
		p (rand spread + pitch); a env; -env da; d 2
	}
}

Swoop(Vel Pitch Slide Enwarble)
{
	struct { wtosc }
	w sine; p Pitch
	!warble 0
	500 {
		tr (rand warble); +p Slide; +warble Enwarble
		+a (Vel / 500)
		d 1
	}
	wg (a - .001) {
		*a .5
		-p (250 * Slide)
		-warble (250 * Enwarble)
		250 {
			tr (rand warble); +p Slide; +warble Enwarble; d 1
		}
	}
}

Electro1(V)
{
	struct { wtosc }
	w noise; a V; set a; p 6
	a 0; d 50
	p 5; a (V * .1); d 150
	a 0; d 10
}

UIOpen()
{
	struct { wtosc }
	w triangle; p .5; a .6
	15 {
		-p .1; d .5
	}
	10 {
		-p .1; d 5
	}
	a 0; d 5
	w sine; a .7
	wg (a - .001) {
		p (rand 1.5 - 3); -a .01; d 10
	}
	a 0; d 10
}

UIMove()
{
	struct { wtosc }
	w sine
	wl (a - .05) {
		p (rand 3 - 2.5); +a .001; d 1
	}
	wg (a - .001) {
		p (rand 3 - 2.5); -a .001; d 1
	}
	a 0; d 10
}

UICountdownTick(P V=1)
{
	struct { wtosc }
	+tr P
	w pulse10
	a (V * .1); set a
	p 0; d 10
	p 1; d 10
	p 2; d 10
	p 3; d 10
	100 {
		*a .8; d 10
	}
	a 0; d 10
}

UITick()
{
	struct { wtosc }
	w sine; p 2.5; a .05
	30 {
		-p .1; *a .9; d .5
	}
	a 0; d 10
}

UIOK()
{
	struct { wtosc }
	w sine; p 0; a .6
	15 {
		-p .1; d 1
	}
	15 {
		-p .1; d 10
	}
	a 0; d 100
}

UICancel()
{
	struct { wtosc }
	w triangle
	5 {
		p 2; a .15
		15 {
			-p .1; *a .8; d 1
		}
	}
	a 0; d 5
}

UIError()
{
	struct { wtosc }
	a .1; w saw
	20 {
		p 3; phase 0
		12 {
			-p .2; d 1
		}
	}
	a 0; d 5
}

UIGameOver()
{

}

UIReady()
{
	!V .3
	Swoop V -3 .002 .002
	Swoop (V * .1) -2 .002 .002
	Swoop (V * .1) 1 .002 .001
	Swoop (V * .1) (1 + 7n) .002 .001
	Swoop (V * .1) 3 .002 .001
	d 490
	Tele triangle 2000f 1.6 (V * .2) 10 700
	Tele triangle 2000f .6 (V * .1) 150 500
	Tele square 250f 3 (V * .1) 10 200
	Tele sine 30f 1 (V * 2) 50 500
	Tele sine 50f 2 (V * 1) 15 300
	d 10
	Electro1 .4
}

Scratch(Vel Pitch Wave Slide)
{
	struct { wtosc }
	w Wave; p (Pitch - (Slide / 1.5)); a 0
	/Slide 300
	50 {
		+p (Slide * 2); +a (.02 * Vel); d 1
	}
	50 {
		+p (Slide * 2); d 1
	}
	200 {
		+p (Slide / 4); d 1
	}
	200 {
		+p (Slide / 2); -a (Vel / 200); d 1
	}
}
DoScratch(Vel Slide)
{
	Scratch (Vel * .15) 4 noise Slide
	Scratch (Vel * .3) -24n sine Slide
	Scratch (Vel * .3) -12n sine Slide
	Scratch (Vel * .1) 0 saw Slide
	Scratch (Vel * .1) 4n square Slide
	Scratch (Vel * .1) 7n square Slide
	Scratch (Vel * .1) 14n square Slide
	Scratch (Vel * .08) 26n saw Slide
	Scratch (Vel * .1) 3 saw Slide
}

UIPlay()
{
	DoScratch .3 5
}

UIPause()
{
	DoScratch .3 -5
}

UINoise()
{
	struct { wtosc }
	w noise; p 7; a .02; set a; d 10
	!A 0
	for {
		w pulse5; p -1; phase 0; a A; set a
		if (A < .01) {
			+A .001
		}
		d 2
		w noise; p 4
		a 0
		d (1000 / 60 - 2)
	}
.stop
	w noise; p 7; a .02; set a; d 10
	a 0; d 10

	1() {
		force stop
	}
}

UILoader()
{
	struct { wtosc }
	w square; a .005
	for {
		if (rand 1 > .5) {
			p 2400f
		} else {
			p 1200f
		}
		d (1000 / 600)
	}
.stop
	a 0; d 1

	1() {
		force stop
	}
}


export def S_UI_OPEN		UIOpen
export def S_UI_OK		UIOK
export def S_UI_MOVE		UIMove
export def S_UI_TICK		UITick
export def S_UI_CDTICK		UICountdownTick
export def S_UI_GAMEOVER	UIGameOver
export def S_UI_READY		UIReady
export def S_UI_PLAY		UIPlay
export def S_UI_PAUSE		UIPause
export def S_UI_CANCEL		UICancel
export def S_UI_ERROR		UIError
export def S_UI_LOADER		UILoader
export def S_UI_NOISE		UINoise
