def title	"KRChipSFX"
def version	"1.0.0"
def description	"Kobo Redux Chip Sound Theme - Sound Effects"
def author	"David Olofson"
def copyright	"Copyright 2016 David Olofson"
def license	"GPL"
def a2sversion	"1.9.1"


def FADETIME	100


export S_LAUNCH(P V=1 PanX)
{
	struct { wtosc; panmix }
	pan PanX; vol V; set
	w noise
	+tr (P + 2); p 0
	10 {
		+a .02
		+p .1
		d 10
	}
	5 {
		*a .25
		p 1
		20 {
			+p .01
			d 10
		}
	}
}

export S_LAUNCH_BULLET1(P V=1 PanX)
{
	struct { wtosc; panmix }
	pan PanX; vol V; set
	w pulse1
	+tr (P - 1.8); p 0
	2 {
		+a .2
		+p .01
		d 10
	}
	3 {
		-a .1
		-p .01
		d 10
	}
	@a .1; w noise; p 7; d 10
	@a .02
	a 0; d 100
}

export S_LAUNCH_BULLET2(P V=1 PanX)
{
	struct { wtosc; panmix }
	pan PanX; vol V; set
	w pulse1
	+tr (P - 1.9); p 0
	3 {
		+a .2
		+p .01
		d 10
	}
	5 {
		-a .1
		-p .01
		d 10
	}
	@a .15; w noise; p 7.5; d 10
	@a .03
	a 0; d 150
}

export S_LAUNCH_BULLET3(P V=1 PanX)
{
	struct { wtosc; panmix }
	pan PanX; vol V; set
	w pulse1
	+tr (P - 2); p 0
	4 {
		+a .2
		+p .01
		d 10
	}
	6 {
		-a .1
		-p .01
		d 10
	}
	@a .3; w noise; p 8; d 10
	@a .04; p 7
	a .05; d 50
	a 0; d 150
}

export S_LAUNCH_RING(P V=1 PanX)
{
	struct { wtosc; panmix }
	pan PanX; vol V; set
	w triangle
	+tr (P - 1); p 0
	10 {
		+a .1
		+p .2
		d 10
	}
	5 {
		*a .25
		p 1
		10 {
			+p .1
			d 10
		}
	}
}

export S_LAUNCH_BOMB(P V=1 PanX)
{
	struct { wtosc; panmix }
	pan PanX; vol V; set
	w triangle
	+tr P
	p 2
	@a .2
	3 {
		-p .7; d 20
	}
	@a .1
	w noise; p 7; d 20
	w triangle; p -2.5; a 1
	10 {
		+p .2; d 10
	}
	@a .05
	w noise; p 3; d 20
	w triangle; p -2.5; a 1
	5 {
		*a .25
		p -1
		10 {
			-p .1
			d 20
		}
	}
}

export S_DAMAGE(P V=1 PanX)
{
	struct { wtosc; panmix }
	pan PanX; vol V; set
	w square
	+tr (P + 1 + rand .5)
	d rand 50
	phase 0
	@a 1
	3 {
		-p 1
		*a .8
		d 10
	}
	2 {
		-p .3
		d 10
	}
	a 0;	d 10
	w noise
	p 2
	a .2;	d 10
	30 {
		*a .9;	d 10
	}
	a 0;	d 10
}

export S_HIT_ROCK(P V=1 PanX)
{
	struct { wtosc; panmix }
	pan PanX; vol V; set
	w triangle
	+tr (P + 3 + rand .5)
	d rand 50
	phase 0
	@a .5
	d 10
	a .3
	p -3
	3 {
		-p .8
		d 10
		w triangle
	}
	a 0; d 10

	p 6
	a .1; d 10
	p (rand .5 - 1)
	w noise
	a 0; d 50
}

export S_EXPLO_NODE(P V=1 PanX)
{
	struct { wtosc; panmix }
	pan PanX; vol V; set
	w square
	+tr P
	@a .5
	p (1 + rand .5)
	5 {
		-p .7
		d 10
	}
	p (rand .3)
	5 {
		w noise
		-p .2
		*a .9
		d 10
		w square
		-p .2
		*a .9
		d 10
	}
	while (a > .01) {
		w noise
		-p .02
		*a .95
		d 10
		w square
		-p .02
		*a .95
		d 10
	}
	a 0;	d 10
}

export S_EXPLO_ENEMY(P V=1 PanX)
{
	struct { wtosc; panmix }
	pan PanX; vol V; set
	w square
	+tr P
	@a .7
	p .5
	3 {
		-p .5
		d 10
	}
	w noise
	p 3
	7 {
		-p .3
		*a .9
		d 10
	}
	while (a > .01) {
		*a .9
		d 10
	}
	a 0;	d 10
}

export S_EXPLO_PLAYER(P V=1 PanX)
{
	struct { wtosc; panmix }
	pan PanX; vol V; set
	w square
	+tr P
	@a .5
	p 2
	10 {
		-p .5
		d 10
	}
	p 2
	5 {
		-tr .2; p (rand .5)
		*a .95
		d 10
	}
	while (a > .001) {
		-tr .01; p (rand 1)
		*a .98
		d 10
	}
	a 0;	d 10
}

export S_EXPLO_RING(P V=1 PanX)
{
	struct { wtosc; panmix }
	pan PanX; vol V; set
	w noise
	+tr (P - 1); p 3
	a .5
	5 {
		-a .1
		+p .7
		d 10
	}
	a .5
	5 {
		*a .25
		p 1
		10 {
			!tr0 tr
			if (rand 1 > .5) {
				w triangle
			} else {
				w noise
				+tr 2
			}
			+p .1
			d 10
			tr tr0
		}
	}
}

export S_EXPLO_ROCK(P V=1 PanX)
{
	struct { wtosc; panmix }
	pan PanX; vol V; set
	w noise
	+tr P
	p 3
	3 {
		p (rand 3)
		@a (.3 + rand .5)
		a 0; d (10 + rand 20)
	}
	w triangle; a 1; -tr 3
	10 {
		p (rand (a * 2 + 1))
		*a .9
		d 10
	}
	w noise
	a .3
	p 4
	20 {
		*a .8
		d 10
	}
	a 0;	d 10
}

export S_RUMBLE(P V=1 PanX)
{
	struct { wtosc; panmix }
	pan PanX; vol V; set
	w square
	+tr P
	@a .2
	3 {
		p (rand .5)
		-tr .7
		d 10
	}
	w triangle
	a 1
	20 {
		p (rand 1)
		-tr .01
		-a .05
		d 20
	}
	a 0
	-p 1
	d 100
}

export S_SHOT(P V=1 PanX)
{
	struct { wtosc; panmix }
	pan PanX; vol V; set
	w saw
	+tr P

.retrig
	@a .1
	p 2
	10 {
		*p .7
		*a .8
		d 10
	}

	// Recharge (aborted if retrigged)
	p 0
	9 {
		+p .9; d 10
		-p .85; d 10
	}
	20 {
		+p .7; d 10
		-p .65; d 10
	}
	a 0; d 10

	2() {
		force retrig
	}
}

export S_METALLIC(P V=1 PanX)
{
	struct { wtosc; panmix }
	pan PanX; vol V; set
	w square
	+tr P
	@a .05
	p (1 + rand .3);	d 5
	p (rand .5);		d 5
	p (3 + rand .3);
	a 0;			d 30
}

export S_BOMB_TRIG(P V=1 PanX)
{
	struct { wtosc; panmix }
	pan PanX; vol V; set
	w triangle
	a .1
	!playing 1
	while playing {
		3 {
			p 40n;	d 10
			p 45n;	d 10
		}
	}
	1() {
		playing 0
	}
	2(Dmg) { }
	3(pV pX) {
		vol pV
		pan pX
		ramp FADETIME
	}
}

export S_BOMB_DETO(P V=1 PanX)
{
	struct { wtosc; panmix }
	pan PanX; vol V; set
	+tr P
	w square
	+tr P
	@a .5
	p 2
	7 {
		-p .7
		d 10
	}
	w noise
	p 2
	a .3
	while (a > .01) {
		*a .85
		d 10
	}
	a 0;	d 10
}

export S_BOMB2_TRIG(P V=1 PanX)
{
	struct { wtosc; panmix }
	pan PanX; vol V; set
	w triangle
	a .1
	!playing 1
	while playing {
		3 {
			p 38n;	d 10
			p 47n;	d 10
		}
	}
	1() {
		playing 0
	}
	2(Dmg) { }
	3(pV pX) {
		vol pV
		pan pX
		ramp FADETIME
	}
}

export S_BOMB2_DETO(P V=1 PanX)
{
	struct { wtosc; panmix }
	pan PanX; vol V; set
	+tr P
	w square
	+tr P
	@a .7
	p 2.5
	7 {
		-p .8
		d 10
	}
	w noise
	p 1.5
	a .5
	while (a > .01) {
		*a .9
		d 10
	}
	a 0;	d 10
}

export S_CORE(P V=1 PanX)
{
	struct { wtosc; panmix }
	pan PanX; vol V; set
	w square
	-tr (2 - P + rand .2)
	!pf (.77 + rand .01)
	def A0 .1
	a 0

	// Wrrrrrr...
	!running 1
	while running {
		!pd (p2d (p + tr) * pf)
		+a (A0 - a * .1)
		+tr .7;	*p .98;		d pd
		-tr .7;	*p .98;		d pd
	}

	// Destruction!
	//	Breakage
	w noise
	@a .7
	!ps p
	p 7
	5 {
		-p 1
		d 10
	}

	//	Thud
	w square
	5 {
		-p .1
		d 10
	}
	p ps

	//	Over-rev
	@a .3
	+p .25
	!revup (.01 + rand .03)
	25 {
		!pd (p2d (p + tr) * pf)
		+tr .7; +p revup; 	d pd
		-tr .7; +p revup; 	d pd
	}

	//	Explosion
	@a 1
	p 3
	5 {
		-p .5
		d 10
	}
	a .3
	w noise
	p 4
	while (a > .001) {
		-p .01
		*a .9
		d 20
	}
	a 0; d 10

	// Stop
	1() {
		running 0
	}

	// Damage
	2(Dmg) {
		+p Dmg
		+a Dmg
		if (p > 1) {
			p 1
		}
		if (a > .5) {
			a .5
		}
	}

	// Positional update
	3(pV pX) {
		vol pV
		pan pX
		ramp FADETIME
	}
}

export S_BIGSPAWN(P V=1 PanX)
{
	struct { wtosc; panmix }
	pan PanX; vol V; set
	w pulse10
	+tr (P - 3); p 0
	10 {
		+a .1
		+p .01
		d 10
	}
	10 {
		-a .1
		-p .01
		d 10
	}
	@a .5; w noise; p 6; d 10
	@a .1; p 8
	50 {
		*a .8; d 10
	}
}

export S_ENEMY_M1(P V=1 PanX)
{
	struct { wtosc; panmix }
	pan PanX; vol V; set

	def A0 .3
	def TR -3

	!tr0 (tr + P + rand .2)
	tr (tr0 + TR)
	!pf (.51 + rand .01)
	!damage_amount 0
	a 0

.resume
	// Engines
	w square
	for {
		!pd (p2d (p + tr) * pf)
		+a (A0 - a * .1)
		+tr 1;	*p .99;		d pd
		-tr 1;	*p .99;		d pd
	}

.damage
	!ps p
	tr (tr0 + TR)
	p (2 + damage_amount)
	a damage_amount
	5 {
		-p .5
		d 10
	}
	a A0
	d 10
	p (damage_amount + ps)
	if (p > 2) {
		p 2
	}
	jump resume

.death
	w square
	tr tr0
	@a .7
	p 2
	5 {
		-p .5
		d 10
	}
	10 {
		-p .1
		d 10
	}
	w noise
	p -2
	10 {
		+p .2
		d 10
	}
	15 {
		-p .05
		*a .8
		d 100
	}
	a 0
	d 10

	// Stop
	1() {
		force death
	}

	// Damage
	2(Dmg) {
		damage_amount (Dmg * .5 + .5)
		force damage
	}

	// Positional update
	3(pV pX) {
		vol pV
		pan pX
		ramp FADETIME
	}
}
export def S_ENEMY_M2 S_ENEMY_M1
export def S_ENEMY_M3 S_ENEMY_M1
export def S_ENEMY_M4 S_ENEMY_M1
